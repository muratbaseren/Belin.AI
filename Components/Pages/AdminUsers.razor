@page "/admin/users"
@attribute [Authorize(Roles = "Admin")]
@using BelinAI.Data
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using System.ComponentModel.DataAnnotations
@rendermode InteractiveServer

@inject UserManager<ApplicationUser> UserManager
@inject IJSRuntime JS

<PageTitle>Kullanýcý Yönetimi</PageTitle>

<div class="d-flex justify-content-between align-items-center mb-4">
    <h3><i class="bi bi-people"></i> Kullanýcý Yönetimi</h3>
    <div>
        <span class="badge bg-primary">Toplam: @users.Count kullanýcý</span>
        <span class="badge bg-success ms-2">Limitsiz: @users.Count(u => u.UseAppAI)</span>
        <span class="badge bg-warning ms-2">Sýnýrlý: @users.Count(u => !u.UseAppAI)</span>
    </div>
</div>

<div class="row">
    <div class="col-md-12">
        @if (users != null && users.Any())
        {
            <div class="table-responsive">
                <table class="table table-striped table-hover">
                    <thead class="table-dark">
                        <tr>
                            <th><i class="bi bi-person"></i> Kullanýcý Adý</th>
                            <th><i class="bi bi-envelope"></i> E-posta</th>
                            <th><i class="bi bi-key"></i> API Anahtarý</th>
                            <th><i class="bi bi-cpu"></i> AI Kullaným Sayýsý</th>
                            <th><i class="bi bi-infinity"></i> Limitsiz AI</th>
                            <th><i class="bi bi-gear"></i> Ýþlemler</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var user in users)
                        {
                            <tr>
                                <td>
                                    <div class="d-flex align-items-center">
                                        <i class="bi bi-person-circle me-2 text-primary"></i>
                                        <strong>@user.UserName</strong>
                                    </div>
                                </td>
                                <td>
                                    <div class="d-flex align-items-center">
                                        <i class="bi bi-envelope me-2 text-secondary"></i>
                                        @user.Email
                                    </div>
                                </td>
                                <td>
                                    <div class="d-flex align-items-center">
                                        @if (!string.IsNullOrEmpty(user.YzApiKey))
                                        {
                                            <span class="badge bg-success">
                                                <i class="bi bi-shield-lock"></i> Þifrelenmiþ
                                            </span>
                                        }
                                        else
                                        {
                                            <span class="badge bg-secondary">
                                                <i class="bi bi-x-circle"></i> Tanýmlý Deðil
                                            </span>
                                        }
                                    </div>
                                </td>
                                <td>
                                    <div class="input-group" style="width: 180px;">
                                        <span class="input-group-text bg-light">
                                            <i class="bi bi-hash"></i>
                                        </span>
                                        <input type="number" class="form-control form-control-sm" 
                                               @bind="user.AIUseCount" min="0" max="1000" />
                                        <button class="btn btn-outline-primary btn-sm" 
                                                @onclick="() => UpdateUserAICount(user)" 
                                                title="Güncelle">
                                            <i class="bi bi-check-lg"></i>
                                        </button>
                                    </div>
                                </td>
                                <td>
                                    <div class="form-check form-switch">
                                        <input class="form-check-input" type="checkbox" 
                                               checked="@user.UseAppAI" 
                                               @onchange="(e) => UpdateUserUseAppAI(user, (bool)e.Value)" />
                                        <label class="form-check-label">
                                            <span class="badge @(user.UseAppAI ? "bg-success" : "bg-secondary")">
                                                <i class="bi @(user.UseAppAI ? "bi-infinity" : "bi-hourglass")"></i>
                                                @(user.UseAppAI ? "Limitsiz" : "Sýnýrlý")
                                            </span>
                                        </label>
                                    </div>
                                </td>
                                <td>
                                    <div class="btn-group" role="group">
                                        <button class="btn btn-success btn-sm" 
                                                @onclick="() => AddAIUsage(user, 10)" 
                                                title="10 Hak Ekle">
                                            <i class="bi bi-plus-circle"></i> +10
                                        </button>
                                        <button class="btn btn-warning btn-sm" 
                                                @onclick="() => AddAIUsage(user, 50)" 
                                                title="50 Hak Ekle">
                                            <i class="bi bi-plus-circle-fill"></i> +50
                                        </button>
                                        <button class="btn btn-danger btn-sm" 
                                                @onclick="() => ResetAIUsage(user)" 
                                                title="Sýfýrla">
                                            <i class="bi bi-arrow-counterclockwise"></i>
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
        else
        {
            <div class="alert alert-info d-flex align-items-center">
                <i class="bi bi-info-circle me-2"></i>
                <div>Henüz kayýtlý kullanýcý bulunmuyor.</div>
            </div>
        }
    </div>
</div>

<div class="row mt-4">
    <div class="col-md-12">
        <div class="card border-0 shadow-sm">
            <div class="card-header bg-dark text-white">
                <h5 class="mb-0"><i class="bi bi-tools"></i> Toplu Ýþlemler</h5>
            </div>
            <div class="card-body">
                <div class="row g-3">
                    <div class="col-md-3">
                        <button class="btn btn-success w-100 d-flex align-items-center justify-content-center" 
                                @onclick="() => BulkAddAIUsage(10)">
                            <i class="bi bi-plus-circle me-2"></i>
                            Tüm Kullanýcýlara +10 Hak
                        </button>
                    </div>
                    <div class="col-md-3">
                        <button class="btn btn-warning w-100 d-flex align-items-center justify-content-center" 
                                @onclick="() => BulkAddAIUsage(50)">
                            <i class="bi bi-plus-circle-fill me-2"></i>
                            Tüm Kullanýcýlara +50 Hak
                        </button>
                    </div>
                    <div class="col-md-3">
                        <button class="btn btn-info w-100 d-flex align-items-center justify-content-center" 
                                @onclick="EnableAllUsersUnlimitedAI">
                            <i class="bi bi-infinity me-2"></i>
                            Tüm Kullanýcýlarý Limitsiz Yap
                        </button>
                    </div>
                    <div class="col-md-3">
                        <button class="btn btn-secondary w-100 d-flex align-items-center justify-content-center" 
                                @onclick="LoadUsers">
                            <i class="bi bi-arrow-clockwise me-2"></i>
                            Listeyi Yenile
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@if (!string.IsNullOrEmpty(statusMessage))
{
    <div class="row mt-3">
        <div class="col-md-12">
            <div class="alert alert-success alert-dismissible fade show" role="alert">
                <i class="bi bi-check-circle me-2"></i>
                @statusMessage
                <button type="button" class="btn-close" @onclick="() => statusMessage = string.Empty"></button>
            </div>
        </div>
    </div>
}

@code {
    private List<ApplicationUser> users = new();
    private string statusMessage = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadUsers();
    }

    private async Task LoadUsers()
    {
        users = UserManager.Users.OrderBy(u => u.UserName).ToList();
        StateHasChanged();
    }

    private async Task UpdateUserAICount(ApplicationUser user)
    {
        var result = await UserManager.UpdateAsync(user);
        if (result.Succeeded)
        {
            statusMessage = $"{user.UserName} kullanýcýsýnýn AI kullaným sayýsý {user.AIUseCount} olarak güncellendi.";
            StateHasChanged();
        }
        else
        {
            await ShowError("AI kullaným sayýsý güncellenirken bir hata oluþtu.");
        }
    }

    private async Task UpdateUserUseAppAI(ApplicationUser user, bool value)
    {
        user.UseAppAI = value;
        var result = await UserManager.UpdateAsync(user);
        if (result.Succeeded)
        {
            statusMessage = $"{user.UserName} kullanýcýsýnýn limitsiz AI durumu {(value ? "etkinleþtirildi" : "devre dýþý býrakýldý")}.";
            StateHasChanged();
        }
        else
        {
            await ShowError("Limitsiz AI durumu güncellenirken bir hata oluþtu.");
        }
    }

    private async Task AddAIUsage(ApplicationUser user, int amount)
    {
        user.AIUseCount += amount;
        var result = await UserManager.UpdateAsync(user);
        if (result.Succeeded)
        {
            statusMessage = $"{user.UserName} kullanýcýsýna {amount} AI hakký eklendi. Yeni toplam: {user.AIUseCount}";
            StateHasChanged();
        }
        else
        {
            await ShowError("AI hakký eklenirken bir hata oluþtu.");
        }
    }

    private async Task ResetAIUsage(ApplicationUser user)
    {
        bool confirm = await JS.InvokeAsync<bool>("confirm", 
            $"{user.UserName} kullanýcýsýnýn AI kullaným sayýsý sýfýrlansýn mý?");
        
        if (confirm)
        {
            user.AIUseCount = 0;
            var result = await UserManager.UpdateAsync(user);
            if (result.Succeeded)
            {
                statusMessage = $"{user.UserName} kullanýcýsýnýn AI kullaným sayýsý sýfýrlandý.";
                StateHasChanged();
            }
            else
            {
                await ShowError("AI kullaným sayýsý sýfýrlanýrken bir hata oluþtu.");
            }
        }
    }

    private async Task BulkAddAIUsage(int amount)
    {
        bool confirm = await JS.InvokeAsync<bool>("confirm", 
            $"Tüm kullanýcýlara {amount} AI hakký eklensin mi?");
        
        if (confirm)
        {
            int successCount = 0;
            foreach (var user in users)
            {
                user.AIUseCount += amount;
                var result = await UserManager.UpdateAsync(user);
                if (result.Succeeded)
                {
                    successCount++;
                }
            }
            statusMessage = $"{successCount} kullanýcýya {amount} AI hakký eklendi.";
            StateHasChanged();
        }
    }

    private async Task EnableAllUsersUnlimitedAI()
    {
        bool confirm = await JS.InvokeAsync<bool>("confirm", 
            "Tüm kullanýcýlarý limitsiz AI kullanýmý için etkinleþtir?");
        
        if (confirm)
        {
            int successCount = 0;
            foreach (var user in users)
            {
                user.UseAppAI = true;
                var result = await UserManager.UpdateAsync(user);
                if (result.Succeeded)
                {
                    successCount++;
                }
            }
            statusMessage = $"{successCount} kullanýcý limitsiz AI kullanýmý için etkinleþtirildi.";
            StateHasChanged();
        }
    }

    private async Task ShowError(string message)
    {
        await JS.InvokeVoidAsync("alert", "Hata: " + message);
    }
}